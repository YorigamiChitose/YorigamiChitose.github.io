[{"content":"前言 最近对操作系统比较感兴趣，所以打算自己动手尝试一下，边学边写一个玩具操作系统。\n参考资料 书籍\nRISC-V开放架构设计之道 计算机组成与设计硬件软件接口 RISC-V 项目\nrCore 基本目标 使用C语言实现一个能在qemu上运行的riscv64的操作系统，通过opensbi引导系统启动。\n环境搭建 安装 \u0026amp; 配置Linux 为了方便，我选择在windows上使用WSL的Debian来完成，先前也有写过WSL的blog教程，在这就不过多赘述。安装完Linux后，需要安装一些基本的软件包，其他软件包可以按照自己的使用习惯做适当的调整。\nsudo apt update sudo apt upgrade sudo apt install git g++-riscv64-linux-gnu binutils-riscv64-linux-gnu gdb-multiarch qemu-system-misc 软件包 说明 git 代码版本管理工具 g++-riscv64-linux-gnu 编译工具 binutils-riscv64-linux-gnu 编译工具 gdb-multiarch debug工具 qemu-system-misc qemu模拟器 用于模拟运行系统 Tip\n关于文本编辑器：我选择的是VSCode，如果你和我一样使用的是WSL，那么你可以直接在windows上安装VSCode，然后在WSL中使用命令code .来在VSCode中打开当前文件夹。后续也会介绍一些VSCode的插件。\n当然你也可以选择其他文本编辑器，vim，neovim和emacs等都可以，一切按照自己的习惯来。\n后续关于一些工具的使用方法并不会详细描述，如git工具，有需要可以在网上查找教程。\n","permalink":"https://YorigamiChitose.github.io/posts/24-05-04-system-01/","summary":"前言 最近对操作系统比较感兴趣，所以打算自己动手尝试一下，边学边写一个玩具操作系统。 参考资料 书籍 RISC-V开放架构设计之道 计算机组成与设计硬件软件接口 RISC-V 项目 rCore 基本目标 使用C语言实现一个能在qemu上运行的riscv64的操作系统，通过opensbi引导系统启动。 环境搭建 安装 \u0026amp; 配置","title":"手写RISCV操作系统笔记-01-环境搭建"},{"content":"前言 来自2024年的提示：如果条件允许，有多余的设备，实机安装反而是最省事的选择。WSL在部分情况下还是要折腾一下。但是确实算是个不错的选择\n我为什么选择WSL 由于我的部分开发环境必须使用linux环境, 我必须在实际安装/虚拟机/WSL之中选择一个, 最后我选择了WSL. 主要原因如下\n占用空间小 消耗资源少 可以与windows共存 WSL GUI可应付绝大部分需要图形界面的情况 常用软件都可以使用可以一边打游戏一边听音乐写代码 安装并启用WSL 事实上微软的官方教程已经很详细了:官方链接\n安装之前请确认你的Windows版本是否为Win10 2004以上的版本(包括Win11), 若版本不够, 请升级你的Windows或者选择其他的linux环境. 打开你的控制面板, 依次选择程序-程序和功能-启用或关闭Windows功能, 将你看到的带有虚拟机, Linux, 子系统, Hyper等字样的选项勾选上后, 重启你的Windows. 打开你的cmd命令窗口, 输入命令. Tip\n注意: 可能需要魔法\n$ wsl --install 待安装成功后, 直接使用wsl命令启动wsl\nTip\n注意: WSL默认安装Ubuntu, 如果想要安装其他Linux发行版, 使用命令wsl -l -o查看可用的Linux发行版\n$ wsl -l -o 以下是可安装的有效分发的列表。 使用 \u0026#39;wsl.exe --install \u0026lt;Distro\u0026gt;\u0026#39; 安装。 NAME FRIENDLY NAME Ubuntu Ubuntu Debian Debian GNU/Linux kali-linux Kali Linux Rolling Ubuntu-18.04 Ubuntu 18.04 LTS Ubuntu-20.04 Ubuntu 20.04 LTS Ubuntu-22.04 Ubuntu 22.04 LTS Ubuntu-24.04 Ubuntu 24.04 LTS OracleLinux_7_9 Oracle Linux 7.9 OracleLinux_8_7 Oracle Linux 8.7 OracleLinux_9_1 Oracle Linux 9.1 openSUSE-Leap-15.5 openSUSE Leap 15.5 SUSE-Linux-Enterprise-Server-15-SP4 SUSE Linux Enterprise Server 15 SP4 SUSE-Linux-Enterprise-15-SP5 SUSE Linux Enterprise 15 SP5 openSUSE-Tumbleweed openSUSE Tumbleweed 之后使用命令进行安装\n$ wsl --install -d [发行版名称] 安装完成后, 同样使用wsl命令启动你的wsl\nWarning\n常见错误: 出现了部分Linux打印的信息但是很快就退出回到了cmd, 大概率是内核版本问题, 如何更新请STFW\n迁移WSL WSL默认安装位置为C盘且无法更改, 很反人类对吧, 不想C盘爆炸只能想办法迁移到其他盘. 下面给出我自己的解决方案.\n打开cmd输入, 查看你已安装的分发名称, 比如我想迁移的分发叫做ubuntu-sin $ wsl -l 适用于 Linux 的 Windows 子系统分发: ubuntu-sin (默认) Ubuntu Debian Arch 使用命令wsl --export [分发名称] [导出的备份名称]导出你已安装的分发(已安装的Linux), 例: # 导出到当前目录下 wsl --export ubuntu-sin ubuntu-sin-backup.tar # 或者带上路径 wsl --export ubuntu-sin \u0026#39;C:\\Users\\yourname\\Desktop\\ubuntu-sin-backup.tar\u0026#39; Note\n注意: 导出文件名称最好带上文件路径, 比如C:\\Users\\yourname\\Desktop\\ubuntu-sin-backup.tar, 否则你就得慢慢找你导出的文件在哪了.\n3. 找到你想要安装的路径, 例E\\:WSL\\, 使用命令wsl --import [分发命名] [安装位置] [导入的分发备份], 例:\n$ wsl --import ubuntu-sin-new \u0026#39;E\\:WSL\\\u0026#39; \u0026#39;C:\\Users\\yourname\\Desktop\\ubuntu-sin-backup.tar\u0026#39; Note\n注意: 新的分发名称不能与已拥有的分发名称相同\n4. 删除旧的分发wsl --unregister [旧的分发名称]\n$ wsl --unregister ubuntu-sin ","permalink":"https://YorigamiChitose.github.io/posts/22-04-01-wsl/","summary":"前言 来自2024年的提示：如果条件允许，有多余的设备，实机安装反而是最省事的选择。WSL在部分情况下还是要折腾一下。但是确实算是个不错的选择 我为什么选择WSL 由于我的部分开发环境必须使用linux环境, 我必须在实际安装/虚拟机/WSL之中选择一个, 最后我选择了WSL. 主要原因如下","title":"WSL安装与使用"},{"content":" Hello\nA page for test\n#include \u0026lt;stdio.h\u0026gt; int main(void) { printf(\u0026#34;Hello, world!\\n\u0026#34;); return 0; } ","permalink":"https://YorigamiChitose.github.io/posts/21-12-21-hello/","summary":"Hello A page for test #include \u0026lt;stdio.h\u0026gt; int main(void) { printf(\u0026#34;Hello, world!\\n\u0026#34;); return 0; }","title":"你好"}]